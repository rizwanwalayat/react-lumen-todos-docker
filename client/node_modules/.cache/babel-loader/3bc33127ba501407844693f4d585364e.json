{"ast":null,"code":"const initState = {\n  token: localStorage.getItem('access_token') || null,\n  isLoggedIn: localStorage.getItem('isLoggedIn') || false,\n  loggedUser: localStorage.getItem('loggedUser') || null\n};\n\nconst rootReducer = (state = initState, action) => {\n  if (action.type === 'SET_TOKEN') {\n    localStorage.setItem('access_token', action.token);\n    localStorage.setItem('isLoggedIn', true);\n    return { ...state,\n      token: action.token,\n      isLoggedIn: true\n    };\n  } else if (action.type === 'SET_USER') {\n    localStorage.setItem('access_token', action.token);\n    localStorage.setItem('isLoggedIn', true);\n    return { ...state,\n      token: action.token,\n      isLoggedIn: true\n    };\n  } else if (action.type === 'DESTROY_TOKEN') {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('isLoggedIn');\n    localStorage.removeItem('loggedUser');\n    return { ...state,\n      token: null,\n      isLoggedIn: false,\n      loggedUser: null\n    };\n  } else if (action.type === 'DELETE_POST') {\n    let newPosts = state.posts.filter(post => post.id !== action.id);\n    return { ...state,\n      posts: newPosts\n    };\n  }\n\n  return state;\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/xampp/htdocs/react_api_todo/todoapp/src/reducers/rootReducer.js"],"names":["initState","token","localStorage","getItem","isLoggedIn","loggedUser","rootReducer","state","action","type","setItem","removeItem","newPosts","posts","filter","post","id"],"mappings":"AACA,MAAMA,SAAS,GAAG;AACdC,EAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,cAArB,KAAwC,IADjC;AAEdC,EAAAA,UAAU,EAAEF,YAAY,CAACC,OAAb,CAAqB,YAArB,KAAsC,KAFpC;AAGdE,EAAAA,UAAU,EAAEH,YAAY,CAACC,OAAb,CAAqB,YAArB,KAAsC;AAHpC,CAAlB;;AAKA,MAAMG,WAAW,GAAG,CAACC,KAAK,GAAGP,SAAT,EAAoBQ,MAApB,KAA+B;AAC/C,MAAGA,MAAM,CAACC,IAAP,KAAgB,WAAnB,EAAgC;AAE5BP,IAAAA,YAAY,CAACQ,OAAb,CAAqB,cAArB,EAAqCF,MAAM,CAACP,KAA5C;AACAC,IAAAA,YAAY,CAACQ,OAAb,CAAqB,YAArB,EAAmC,IAAnC;AACA,WAAQ,EACJ,GAAGH,KADC;AAEJN,MAAAA,KAAK,EAAEO,MAAM,CAACP,KAFV;AAGJG,MAAAA,UAAU,EAAE;AAHR,KAAR;AAKH,GATD,MAUK,IAAGI,MAAM,CAACC,IAAP,KAAgB,UAAnB,EAA+B;AAEhCP,IAAAA,YAAY,CAACQ,OAAb,CAAqB,cAArB,EAAqCF,MAAM,CAACP,KAA5C;AACAC,IAAAA,YAAY,CAACQ,OAAb,CAAqB,YAArB,EAAmC,IAAnC;AACA,WAAQ,EACJ,GAAGH,KADC;AAEJN,MAAAA,KAAK,EAAEO,MAAM,CAACP,KAFV;AAGJG,MAAAA,UAAU,EAAE;AAHR,KAAR;AAKH,GATI,MAUA,IAAGI,MAAM,CAACC,IAAP,KAAgB,eAAnB,EAAoC;AAErCP,IAAAA,YAAY,CAACS,UAAb,CAAwB,cAAxB;AACAT,IAAAA,YAAY,CAACS,UAAb,CAAwB,YAAxB;AACAT,IAAAA,YAAY,CAACS,UAAb,CAAwB,YAAxB;AAEA,WAAQ,EACJ,GAAGJ,KADC;AAEJN,MAAAA,KAAK,EAAE,IAFH;AAGJG,MAAAA,UAAU,EAAE,KAHR;AAIJC,MAAAA,UAAU,EAAE;AAJR,KAAR;AAMH,GAZI,MAaA,IAAGG,MAAM,CAACC,IAAP,KAAgB,aAAnB,EAAkC;AACnC,QAAIG,QAAQ,GAAGL,KAAK,CAACM,KAAN,CAAYC,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACQ,EAA9C,CAAf;AAEA,WAAO,EACH,GAAGT,KADA;AAEHM,MAAAA,KAAK,EAAED;AAFJ,KAAP;AAIH;;AAED,SAAOL,KAAP;AACH,CA5CD;;AA8CA,eAAeD,WAAf","sourcesContent":["\r\nconst initState = {\r\n    token: localStorage.getItem('access_token') || null,\r\n    isLoggedIn: localStorage.getItem('isLoggedIn') || false,\r\n    loggedUser: localStorage.getItem('loggedUser') || null,\r\n}\r\nconst rootReducer = (state = initState, action) => {\r\n    if(action.type === 'SET_TOKEN') {\r\n\r\n        localStorage.setItem('access_token', action.token);\r\n        localStorage.setItem('isLoggedIn', true);\r\n        return  {\r\n            ...state,\r\n            token: action.token,\r\n            isLoggedIn: true\r\n        }\r\n    }\r\n    else if(action.type === 'SET_USER') {\r\n\r\n        localStorage.setItem('access_token', action.token);\r\n        localStorage.setItem('isLoggedIn', true);\r\n        return  {\r\n            ...state,\r\n            token: action.token,\r\n            isLoggedIn: true\r\n        }\r\n    }\r\n    else if(action.type === 'DESTROY_TOKEN') {\r\n\r\n        localStorage.removeItem('access_token');\r\n        localStorage.removeItem('isLoggedIn');\r\n        localStorage.removeItem('loggedUser');\r\n\r\n        return  {\r\n            ...state,\r\n            token: null,\r\n            isLoggedIn: false,\r\n            loggedUser: null\r\n        }\r\n    }\r\n    else if(action.type === 'DELETE_POST') {\r\n        let newPosts = state.posts.filter(post => post.id !== action.id);\r\n\r\n        return {\r\n            ...state,\r\n            posts: newPosts\r\n        }\r\n    }    \r\n\r\n    return state;\r\n}\r\n\r\nexport default rootReducer"]},"metadata":{},"sourceType":"module"}